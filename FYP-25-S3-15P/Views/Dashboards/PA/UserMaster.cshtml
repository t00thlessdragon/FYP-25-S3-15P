@model FYP_25_S3_15P.ViewModels.UserMasterVm
@addTagHelper *, Microsoft.AspNetCore.Mvc.TagHelpers
@{
    ViewData["Title"] = "User Management Dashboard";
    var users = Model.Users?.ToList() ?? new List<FYP_25_S3_15P.ViewModels.UserMasterVm.Row>();
    var total = users.Count;
}

<style>
  /* Let dropdowns escape responsive wrapper */
  .overflow-visible { overflow: visible !important; }
  .table .dropdown-menu { z-index: 1060; }
</style>

<section class="card-xl container-wide">
  <div class="card rounded-4 p-4 p-lg-5 shadow-lg">

    <div class="d-flex justify-content-between align-items-center mb-3">
      <h2 class="mb-0">Users Management</h2>
      <span class="text-muted small">@total total</span>
    </div>

    @* flash messages *@
    @if (TempData["Flash"] is string ok && !string.IsNullOrWhiteSpace(ok))
    {
      <div class="alert alert-success alert-dismissible fade show" role="alert">
        @ok
        <button type="button" class="btn-close" data-bs-dismiss="alert" aria-label="Close"></button>
      </div>
    }
    @if (TempData["Error"] is string err && !string.IsNullOrWhiteSpace(err))
    {
      <div class="alert alert-danger alert-dismissible fade show" role="alert">
        @err
        <button type="button" class="btn-close" data-bs-dismiss="alert" aria-label="Close"></button>
      </div>
    }

    <div class="table-responsive overflow-visible">
      <table class="table align-middle">
        <thead class="table-dark">
        <tr>
          <th style="width:64px;">No.</th>
          <th>Name</th>
          <th>Email</th>
          <th>University</th>
          <th>Role</th>
          <th>Status</th>
          <th>Last Login</th>
          <th class="text-end" style="width:80px;">Action</th>
        </tr>
        </thead>
        <tbody>
        @for (var i = 0; i < users.Count; i++)
        {
          var u = users[i];
          var statusLower = (u.Status ?? "").ToLowerInvariant();
          var badge = u.IsLocked ? "danger"
            : statusLower == "active" ? "success"
            : statusLower == "pending" ? "warning"
            : "secondary";

          <tr>
            <td class="text-muted">@(@i + 1)</td>
            <td>@u.Name</td>
            <td>@u.Email</td>
            <td>@u.UniName</td>
            <td>@u.Role</td>
            <td><span class="badge bg-@badge">@((u.IsLocked ? "Locked" : u.Status) ?? "-")</span></td>
            <td>@u.LastLoginLocal</td>

            <td class="text-end">
              <div class="dropdown">
                <button class="btn btn-sm btn-link text-muted p-0" data-bs-toggle="dropdown" aria-label="Row actions">
                  <i class="bi bi-three-dots-vertical fs-5"></i>
                </button>
                <ul class="dropdown-menu dropdown-menu-end">
                  <li>
                    <button
                      class="dropdown-item"
                      data-bs-toggle="modal"
                      data-bs-target="#viewUserModal"
                      data-id="@u.Id"
                      data-name="@u.Name"
                      data-email="@u.Email"
                      data-uniname="@u.UniName"
                      data-role="@u.Role"
                      data-status="@u.Status"
                      data-lastlogin="@u.LastLoginLocal"
                      data-active="@((!u.IsLocked) ? "true" : "false")">
                      View
                    </button>

                  </li>
                </ul>
              </div>
            </td>
          </tr>
        }
        </tbody>
      </table>
    </div>
  </div>
</section>

<!-- View User modal -->
<div class="modal fade" id="viewUserModal" tabindex="-1" aria-hidden="true">
  <div class="modal-dialog modal-lg">
    <div class="modal-content">
      <div class="modal-header">
        <h5 class="modal-title">User Details</h5>
        <button type="button" class="btn-close" data-bs-dismiss="modal"></button>
      </div>

      <div class="modal-body">
        <div class="row g-3">
          <div class="col-md-6">
            <label class="form-label">Name</label>
            <input id="usr_Name" class="form-control" readonly />
          </div>
          <div class="col-md-6">
            <label class="form-label">Email</label>
            <input id="usr_Email" class="form-control" readonly />
          </div>

          <div class="col-md-8">
            <label class="form-label">University</label>
            <input id="usr_UniName" class="form-control" readonly />
          </div>
          <div class="col-md-4">
            <label class="form-label">Last Login</label>
            <input id="usr_LastLogin" class="form-control" readonly />
          </div>

          <div class="col-md-4">
            <label class="form-label">Role</label>
            <input id="usr_Role" class="form-control" readonly />
          </div>
          <div class="col-md-4">
            <label class="form-label">Status</label>
            <input id="usr_Status" class="form-control" readonly />
          </div>

          <div class="col-md-4 d-flex align-items-end">
            <form asp-controller="PADashboard" asp-action="ToggleActive" method="post" class="m-0" id="toggleActiveForm">
              @Html.AntiForgeryToken()
              <input type="hidden" name="id" id="toggle_Id" />
              <input type="hidden" name="value" id="toggle_Value" />
              <div class="form-check form-switch">
                <input class="form-check-input" type="checkbox" id="toggle_IsActive" role="switch">
                <label class="form-check-label" for="toggle_IsActive">Active?</label>
              </div>
            </form>
          </div>
        </div>
      </div>

      <div class="modal-footer justify-content-between">
        <form asp-controller="PADashboard" asp-action="ResetPassword" method="post" class="m-0">
          @Html.AntiForgeryToken()
          <input type="hidden" name="id" id="reset_Id" />
          <button type="submit" class="btn btn-outline-warning">Reset Password</button>
        </form>
        <button type="button" class="btn btn-primary" data-bs-dismiss="modal">Close</button>
      </div>
    </div>
  </div>
</div>

<!-- Confirm deactivate modal -->
<div class="modal fade" id="confirmDeactivateModal" tabindex="-1" aria-hidden="true">
  <div class="modal-dialog">
    <div class="modal-content">
      <div class="modal-header">
        <h5 class="modal-title">Deactivate account?</h5>
        <button type="button" class="btn-close" data-bs-dismiss="modal"></button>
      </div>
      <div class="modal-body">
        Do you want to deactivate this account?
      </div>
      <div class="modal-footer">
        <button type="button" class="btn btn-secondary" data-bs-dismiss="modal" id="cancelDeactivateBtn">Cancel</button>
        <button type="button" class="btn btn-danger" id="confirmDeactivateBtn">Confirm</button>
      </div>
    </div>
  </div>
</div>

<script>
  const viewUserModal   = document.getElementById('viewUserModal');
  const usr_Name        = document.getElementById('usr_Name');
  const usr_Email       = document.getElementById('usr_Email');
  const usr_UniName     = document.getElementById('usr_UniName');
  const usr_Role        = document.getElementById('usr_Role');
  const usr_Status      = document.getElementById('usr_Status');
  const usr_LastLogin   = document.getElementById('usr_LastLogin');

  const reset_Id        = document.getElementById('reset_Id');
  const toggle_Id       = document.getElementById('toggle_Id');
  const toggle_Value    = document.getElementById('toggle_Value');
  const toggle_IsActive = document.getElementById('toggle_IsActive');

  const confirmDeactivateModal = document.getElementById('confirmDeactivateModal');
  const confirmDeactivateBtn   = document.getElementById('confirmDeactivateBtn');
  const cancelDeactivateBtn    = document.getElementById('cancelDeactivateBtn');
  const toggleActiveForm       = document.getElementById('toggleActiveForm');

  // Fill WHEN the modal is about to show (relatedTarget is guaranteed here)
  viewUserModal.addEventListener('show.bs.modal', (e) => {
    const trigger = e.relatedTarget;
    if (!trigger) return;

    // fill simple fields
    usr_Name.value      = trigger.dataset.name      || '';
    usr_Email.value     = trigger.dataset.email     || '';
    usr_UniName.value   = trigger.dataset.uniname   || '';
    usr_Role.value      = trigger.dataset.role      || '';
    usr_Status.value    = trigger.dataset.status    || '';
    usr_LastLogin.value = trigger.dataset.lastlogin || '-';

    const id = trigger.dataset.id || '';
    reset_Id.value  = id;
    toggle_Id.value = id;

    // true/false from data-active="true|false"
    const isActive = (trigger.dataset.active || '').trim() === 'true';

    // flip the switch AFTER layout so Bootstrap recalculates :checked styles
    requestAnimationFrame(() => {
      toggle_IsActive.checked = isActive;           // <- this is what drives the blue state
      toggle_Value.value      = String(isActive);
    });
  });

  // Deactivate confirmation flow
  let pendingToggle = null;

  document.addEventListener('change', (e) => {
    if (e.target !== toggle_IsActive) return;

    if (toggle_IsActive.checked) {
      toggle_Value.value = 'true';
      toggleActiveForm.submit();
    } else {
      pendingToggle = true;
      new bootstrap.Modal(confirmDeactivateModal).show();
    }
  });

  confirmDeactivateBtn?.addEventListener('click', () => {
    if (!pendingToggle) return;
    toggle_Value.value = 'false';
    toggleActiveForm.submit();
    bootstrap.Modal.getInstance(confirmDeactivateModal)?.hide();
    pendingToggle = null;
  });

  cancelDeactivateBtn?.addEventListener('click', () => {
    if (!pendingToggle) return;
    toggle_IsActive.checked = true;                 // revert if cancelled
    pendingToggle = null;
  });

  confirmDeactivateModal?.addEventListener('hidden.bs.modal', () => {
    if (!pendingToggle) return;
    toggle_IsActive.checked = true;                 // revert if dismissed
    pendingToggle = null;
  });
</script>




